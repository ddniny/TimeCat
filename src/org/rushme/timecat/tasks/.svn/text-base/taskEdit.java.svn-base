package org.rushme.timecat.tasks;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import org.rushme.timecat.R;
import org.rushme.timecat.R.id;
import org.rushme.timecat.R.layout;
import org.rushme.timecat.helper.ChipsMultiAutoCompleteTextview;

import android.annotation.SuppressLint;
import android.annotation.TargetApi;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.DatePickerDialog;
import android.app.Dialog;
import android.app.TimePickerDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.res.Configuration;
import android.os.Build;
import android.os.Bundle;
import android.support.v4.app.NavUtils;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.Display;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.Surface;
import android.view.View;
import android.view.View.OnAttachStateChangeListener;
import android.view.View.OnFocusChangeListener;
import android.view.WindowManager;
import android.widget.ArrayAdapter;
import android.widget.AutoCompleteTextView;
import android.widget.Button;
import android.widget.CompoundButton;
import android.widget.CompoundButton.OnCheckedChangeListener;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.MultiAutoCompleteTextView;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.SeekBar;
import android.widget.SeekBar.OnSeekBarChangeListener;
import android.widget.TableRow;
import android.widget.TextView;
import android.widget.TimePicker;

/*
 * can improve: time restriction; calendar, clock;
 */
public class taskEdit extends Activity implements View.OnClickListener{
	EditText wDescription, filename, dDate, dTime, sDate, sTime, rDate, rTime, wPriority;
	RadioGroup stateGroup, importanceGroup;
	RadioButton active, expired, completed, low, moderate, important, crucial;
	SeekBar sb;
	private TextView sbResult;
	String details, startTime, endTime, description, state, importance, tags;
	float priority;
	Date today = new Date();
	Intent intent = new Intent();
	protected static final int DATE_DIALOG = 1;
	protected static final int TIME_DIALOG = 2;
	protected int dOrs = 0; //if 0, set deadline, if 1 set start date and time
	protected SimpleDateFormat df = new SimpleDateFormat("MM/dd/yyyy HH:mm");
	protected SimpleDateFormat sdf_date = new SimpleDateFormat("MM/dd/yyyy");
	protected SimpleDateFormat sdf_time = new SimpleDateFormat("HH:mm");
	Date dueDay = null;
	Date now = null;
	Date startDay = null;
	Menu currentMenu;
	private task checkedTask = null;
	private String oldName, table, id;
	public static boolean textChanged = false;
	public static HashMap<String, ArrayList<task>> tagToTask;
	private TableRow tagRow = null;
	ChipsMultiAutoCompleteTextview wTag;
	private boolean importanceChangeFlag = false;
	//task(String details, String startTime, String endTime, String description, String state, String importance, int priority, String tags)

	@Override
	public void onCreate(Bundle icicle){
		super.onCreate(icicle);
		setContentView(R.layout.task_edit);

		getActionBar().setDisplayHomeAsUpEnabled(true);
		Intent intent = getIntent();
		float newScore = -1;
		if (intent.getStringExtra("newScore") != null){
			newScore = Float.parseFloat(intent.getStringExtra("newScore"));
		}
		TextWatcher mTextWatcher = new TextWatcher() {
			@Override  
			public void onTextChanged(CharSequence s, int start, int before, int count) {  
				// TODO Auto-generated method stub  
			}  

			@Override  
			public void beforeTextChanged(CharSequence s, int start, int count,  
					int after) {  
				// TODO Auto-generated method stub  
			}  

			@Override  
			public void afterTextChanged(Editable s) {  
				// TODO Auto-generated method stub  
				taskEdit.textChanged = true;   
			}  
		}; 

		wDescription = (EditText)findViewById(R.id.wDescription);
		wDescription.requestFocus();
		filename = (EditText)findViewById(R.id.filename);
		dDate = (EditText)findViewById(R.id.dDate);
		dTime = (EditText)findViewById(R.id.dTime);
		sDate = (EditText)findViewById(R.id.sDate);
		sDate.setText(sdf_date.format(today));
		sTime = (EditText)findViewById(R.id.sTime);
		sTime.setText(sdf_time.format(today));
		rDate = (EditText)findViewById(R.id.rDate);
		rTime = (EditText)findViewById(R.id.rTime);
		wPriority = (EditText)findViewById(R.id.wPriority);
		if (newScore>0){
			System.out.println(newScore + "newScore!!!!!!!!!!!!!!!");
			wPriority.setText(String.valueOf(newScore));
		}
		//wTags[0] = (AutoCompleteTextView)findViewById(R.id.wTags);//找到相应的控件
		wTag = (ChipsMultiAutoCompleteTextview) findViewById(R.id.multiAutoCompleteTextView1);
		wTag.setTokenizer(new MultiAutoCompleteTextView.CommaTokenizer());

		sb =(SeekBar)findViewById(R.id.sb);
		sbResult=(TextView)findViewById(R.id.sbresult);

		stateGroup = (RadioGroup)findViewById(R.id.stateGroup);
		importanceGroup = (RadioGroup)findViewById(R.id.importanceGroup);
		active = (RadioButton)findViewById(R.id.active);
		expired = (RadioButton)findViewById(R.id.expired);
		completed = (RadioButton)findViewById(R.id.completed);
		low = (RadioButton)findViewById(R.id.low);
		moderate = (RadioButton)findViewById(R.id.moderate);
		important = (RadioButton)findViewById(R.id.important);
		crucial = (RadioButton)findViewById(R.id.crucial);
		//tagRow = (TableRow) findViewById(R.id.tableRow10);


		//set autoprompting when enderring the tags
		String[] allTags = getAllTags();
		ArrayAdapter<String> adapter = new ArrayAdapter<String>(this, R.layout.taglist_item, allTags);//配置Adaptor
		wTag.setAdapter(adapter);

		dDate.setOnClickListener(this);
		dTime.setOnClickListener(this);
		sDate.setOnClickListener(this);
		sTime.setOnClickListener(this);


		dDate.addTextChangedListener(new TextWatcher(){

			@Override
			public void afterTextChanged(Editable s) {
				// TODO Auto-generated method stub

			}

			@Override
			public void beforeTextChanged(CharSequence s, int start, int count,
					int after) {
				// TODO Auto-generated method stub

			}

			@Override
			public void onTextChanged(CharSequence s, int start, int before,
					int count) {
				// TODO Auto-generated method stub
				if (dDate.getText().toString().equals("")) return;

				int remainingDays = 0; 	  
				Calendar beginCalendar = Calendar.getInstance();  
				Calendar endCalendar = Calendar.getInstance();  
				beginCalendar.setTime(today);  
				try {
					endCalendar.setTime(sdf_date.parse(dDate.getText().toString()));
				} catch (ParseException e) {
					e.printStackTrace();
				}  
				//calculate the remaining days. 
				while(beginCalendar.before(endCalendar)){  
					remainingDays++;  
					beginCalendar.add(Calendar.DAY_OF_MONTH, 1);  
				}  
				rDate.setText(Integer.toString(remainingDays) + "Days");
			}

		});

		dTime.addTextChangedListener(new TextWatcher(){

			@Override
			public void afterTextChanged(Editable s) {
				// TODO Auto-generated method stub

			}

			@Override
			public void beforeTextChanged(CharSequence s, int start, int count,
					int after) {
				// TODO Auto-generated method stub

			}

			@Override
			public void onTextChanged(CharSequence s, int start, int before,
					int count) {
				// TODO Auto-generated method stub
				if (dDate.getText().toString().equals("")||dTime.getText().toString().equals("")) return;

				try {
					now = df.parse(df.format(today));
				} catch (ParseException e) {
					e.printStackTrace();
				}
				try {
					dueDay = df.parse(dDate.getText().toString() + " " + dTime.getText().toString());
				} catch (ParseException e) {
					e.printStackTrace();
				}
				long l=dueDay.getTime() - now.getTime();
				long day=l/(24*60*60*1000);
				long hour=(l/(60*60*1000)-day*24);
				long min=((l/(60*1000))-day*24*60-hour*60);
				//long s=(l/1000-day*24*60*60-hour*60*60-min*60);
				if(min > 0){
					rTime.setText(hour + " Hours " + min + " Mins");
				}else{
					rTime.setText("0 Hour 0 Min"); 
				}

			}

		});


		sb.setOnSeekBarChangeListener(new OnSeekBarChangeListener() {

			public void onStopTrackingTouch(SeekBar seekBar) {
				// TODO Auto-generated method stub
				//Toast.makeText(MainActivity.this, "滑动结束", Toast.LENGTH_LONG).show();
			}

			public void onStartTrackingTouch(SeekBar seekBar) {
				// TODO Auto-generated method stub
				//Toast.makeText(MainActivity.this, "滑动开始", Toast.LENGTH_LONG).show();		
			}

			public void onProgressChanged(SeekBar seekBar, int progress,
					boolean fromUser) {
				sbResult.setText(progress+"%");
				// TODO Auto-generated method stub

			}
		});

		/*
		 * Show the information of an existing task.
		 */
		if (intent.getStringExtra("id") != null && intent.getStringExtra("table") != null){
			id = intent.getStringExtra("id");
			table = intent.getStringExtra("table");
			checkedTask = Main.mgr.queryById(id, table);
			wDescription.setText(checkedTask.description);
			filename.setText(checkedTask.details);
			String[] dateAndTime = checkedTask.endTime.split(" ");
			dDate.setText(dateAndTime[0]);
			dTime.setText(dateAndTime[1]);
			dateAndTime = checkedTask.startTime.split(" ");
			sDate.setText(dateAndTime[0]);
			sTime.setText(dateAndTime[1]);
			rDate.setText(MainActivity.ma.getRemaining(checkedTask).split(" ")[0] + " Days");

			/*
			 * set the value of slider
			 */
			try {
				now = df.parse(df.format(today));
				dueDay = df.parse(dDate.getText().toString() + " " + dTime.getText().toString());
				startDay = df.parse(sDate.getText().toString() + " " + sTime.getText().toString());
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			float percentage = ((float)(now.getTime() - startDay.getTime())/ (float)(dueDay.getTime() - startDay.getTime())) * 100f;
			sb.setProgress((int)percentage);

			if (checkedTask.getState.toString().equalsIgnoreCase("COMPLETED")){
				completed.setChecked(true);
				sb.setProgress(100);
			}else if (percentage >= 100){
				expired.setChecked(true);
				checkedTask.setState("EXPIRED"); 
				Main.mgr.updateById(checkedTask, id, table);
			}else if(checkedTask.getState.toString().equalsIgnoreCase("ACTIVE")){
				active.setChecked(true);
			}

			if(checkedTask.getImportance.toString().equalsIgnoreCase("LOW")){
				low.setChecked(true);
			}else if (checkedTask.getImportance.toString().equalsIgnoreCase("MODERATE")){
				moderate.setChecked(true);
			}else if (checkedTask.getImportance.toString().equalsIgnoreCase("IMPORTANT")){
				important.setChecked(true);
			}else{
				crucial.setChecked(true);
			}

			wPriority.setText(checkedTask.priority +"");

			if(checkedTask.tags != null) {
				for(String s: checkedTask.tags){
					wTag.append(s + " "); 
					wTag.setChips();
				}
			}

		}

		wDescription.addTextChangedListener(mTextWatcher); 	
		filename.addTextChangedListener(mTextWatcher); 
		dDate.addTextChangedListener(mTextWatcher); 
		dTime.addTextChangedListener(mTextWatcher);
		sDate.addTextChangedListener(mTextWatcher);
		sTime.addTextChangedListener(mTextWatcher);
		rDate.addTextChangedListener(mTextWatcher);
		rTime.addTextChangedListener(mTextWatcher);
		wPriority.addTextChangedListener(mTextWatcher);
		wTag.addTextChangedListener(mTextWatcher);

		OnCheckedChangeListener radioListener = new OnCheckedChangeListener(){

			@Override
			public void onCheckedChanged(CompoundButton buttonView,
					boolean isChecked) {
				// TODO Auto-generated method stub
				int priority = 0;
				if (buttonView.getText().equals("LOW")) {
					priority = 0;
				} else if (buttonView.getText().equals("MODERATE")) {
					priority = 1000;
				} else if (buttonView.getText().equals("IMPORTANT")) {
					priority = 5000;
				} else {
					priority = 8000;
				}
				if (isChecked) {
					String pri = wPriority.getText().toString();
					if (pri.equals("0") || pri.equals("1000") || pri.equals("5000") || pri.equals("8000")) {
						wPriority.setText(String.valueOf(priority));
					}
				}
			}


		};

		moderate.setOnCheckedChangeListener(radioListener);
		low.setOnCheckedChangeListener(radioListener);
		important.setOnCheckedChangeListener(radioListener);
		crucial.setOnCheckedChangeListener(radioListener);


	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		MenuInflater inflater = getMenuInflater();
		inflater.inflate(R.menu.task_edit, menu);
		menu.findItem(R.id.action_save).setVisible(true);
		currentMenu = menu;
		return super.onCreateOptionsMenu(menu);
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		switch (item.getItemId()) {
		// Respond to the action bar's Up/Home button
		case android.R.id.home:
			back();

			return true;
		case R.id.action_save:
			if (add()!=0){
				if (!state.equals("COMPLETED")){
					intent.setClass(this, Main.class);
				}else{
					Bundle bundle = new Bundle();
					bundle.putString("table", "COMPLETED");
					intent.putExtras(bundle);
					intent.setClass(this, Main.class);
				}
				startActivity(intent);
			}
			return true;
		default:
			break;
		}
		return super.onOptionsItemSelected(item);
	}

	public void onBackPressed() {
		back();
	}

	public void back() {
		if (!textChanged) {
			finish();
		}else{
			new AlertDialog.Builder(this)
			.setTitle("Have not saved!")
			.setMessage("Are you sure you want to leave without saving?")
			.setPositiveButton("Leave", new DialogInterface.OnClickListener() {
				public void onClick(DialogInterface dialog, int which) { 
					// continue without save
					//NavUtils.navigateUpFromSameTask(taskEdit.this);
					textChanged = false;
					finish();
				}
			})
			.setNeutralButton("Stay", new DialogInterface.OnClickListener() {
				public void onClick(DialogInterface dialog, int which) {

				}
			})
			.setNegativeButton("Save", new DialogInterface.OnClickListener() {
				public void onClick(DialogInterface dialog, int which) { 
					textChanged = false;
					if (add()!=0){
						if (!state.equals("COMPLETED")){
							NavUtils.navigateUpFromSameTask(taskEdit.this);
						}else{
							Bundle bundle = new Bundle();
							bundle.putString("table", "COMPLETED");
							intent.putExtras(bundle);
							intent.setClass(taskEdit.this, Main.class);
							startActivity(intent);
							finish();

						}
					}
				}
			})
			.show();
		}
	}

	protected Dialog onCreateDialog(int id){
		Calendar calendar = Calendar.getInstance();
		Dialog dialog = null;
		switch(id){
		case DATE_DIALOG:
			DatePickerDialog.OnDateSetListener dateListener = new DatePickerDialog.OnDateSetListener() {

				@Override
				public void onDateSet(DatePicker view, int year, int monthOfYear,
						int dayOfMonth) {
					if (dOrs == 0){
						dDate.setText((monthOfYear+1) + "/" + dayOfMonth + "/" + year);
					}else{
						sDate.setText((monthOfYear+1) + "/" + dayOfMonth + "/" + year);
					}
				}
			};
			dialog = new DatePickerDialog(this, dateListener, calendar.get(Calendar.YEAR),
					calendar.get(Calendar.MONTH), calendar.get(Calendar.DAY_OF_MONTH));
			break;
		case TIME_DIALOG:
			TimePickerDialog.OnTimeSetListener timeListener = new TimePickerDialog.OnTimeSetListener() {

				@Override
				public void onTimeSet(TimePicker view, int hourOfDay, int minute) {
					if (dOrs == 0){
						dTime.setText(hourOfDay + ":" + minute);
					}else{
						sTime.setText(hourOfDay + ":" + minute);
					}
				}
			};
			dialog = new TimePickerDialog(this, timeListener, 
					calendar.get(Calendar.HOUR_OF_DAY), 
					calendar.get(Calendar.MINUTE), true); //whether is twenty-four-hour clock
			break;
		default:
			break;
		}
		return dialog;
	}


	protected void onStart(){
		super.onStart();
		MyExit myExit = (MyExit)getApplication();
		if (myExit.isExit()){
			finish();
		}
	}

	@Override
	public void onClick(View v) {
		switch(v.getId()){
		case R.id.dDate:
			dOrs = 0;
			showDialog(DATE_DIALOG);
			break;
		case R.id.dTime:
			dOrs = 0;
			showDialog(TIME_DIALOG);
			break;
		case R.id.sDate:
			dOrs = 1;
			showDialog(DATE_DIALOG);
			break;
		case R.id.sTime:
			dOrs = 1;
			showDialog(TIME_DIALOG);
			break;
		default:
			break;
		}

	}

	/*
	 * return 1 - success, 0 - failed.
	 */
	public int add(){   
		ArrayList<task> tasks = new ArrayList<task>();
		details = filename.getText().toString();
		if (details.equals("")){   //task name cannot be null
			details = null;
		}
		startTime = sDate.getText().toString() + " " + sTime.getText().toString();
		if (startTime.trim().equals("")){   //if the user did not enter the start time our deadline, set it default to current date our time
			startTime = df.format(today);
		}else if (sDate.getText().toString().equals("")) {
			startTime = sdf_date.format(today) + " " + sTime.getText().toString();
		}else{
			startTime = sDate.getText().toString() + " " + sdf_time.format(today);
		}

		endTime = dDate.getText().toString() + " " + dTime.getText().toString();
		if (endTime.trim().equals("")){
			endTime = df.format(today);
		}else if (dDate.getText().toString().equals("")) {
			endTime = sdf_date.format(today) + " " + dTime.getText().toString();
		}else{
			endTime = dDate.getText().toString() + " " + sdf_time.format(today);
		}

		try {
			if(df.parse(startTime).after(df.parse(endTime))) {
				AlertDialog.Builder builder = new AlertDialog.Builder(this);
				builder.setMessage("Wrong time: Start time should not after the deadline!")
				.setPositiveButton("OK", new DialogInterface.OnClickListener() {
					public void onClick(DialogInterface dialog, int id) {
						return;
					}
				}).show();
				return 0;
			}
		} catch (ParseException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

		try {   //check whether the state and the relationship between deadline and current is corresponding with each other
			if ((df.parse(endTime).before(today)||df.parse(endTime).equals(today))&&!completed.isChecked()){
				expired.setChecked(true);
			}else if (df.parse(endTime).after(today)&&expired.isChecked()){
				active.setChecked(true);
			}
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		description = wDescription.getText().toString();
		RadioButton checkedState = (RadioButton)findViewById(stateGroup.getCheckedRadioButtonId());
		state = checkedState.getText().toString();
		RadioButton checkedImportance = (RadioButton)findViewById(importanceGroup.getCheckedRadioButtonId());
		importance = checkedImportance.getText().toString();
		String priority_string = wPriority.getText().toString();
		if (priority_string.equals("")){
			priority = 1000;
		}else{
			priority = Float.parseFloat(priority_string);
		}


		tags = wTag.getText().toString();
		if (tags == null || tags.equals("")) {
			tags = null;
		} else {
			if (tags.contains(",")) {
				tags = tags.replace(",", " ");
			}
		}

		task task1 = new task(null, details, startTime, endTime, description, state, importance, priority, tags, null);
		if (checkedTask == null) {
			tasks.add(task1);
//			if (state.equals("COMPLETED")){
//				Main.mgr.add(tasks, "completedTasktable");
//				table = "completedTasktable";
//			}else{
				Main.mgr.add(tasks, "tasktable");
				table = "tasktable";
			//}
		}else {
//			if (table.toString().equals("tasktable")&&state.equals("COMPLETED")){
//				Main.mgr.deleteOneTask(id, table);
//				List<task> list = new ArrayList<task>();
//				list.add(task1);
//				Main.mgr.add(list, "completedTasktable");
//				table = "completedTasktable";
//			}else if (table.toString().equals("completedTasktable")&&(state.equals("ACTIVE")||state.equals("EXPIRED"))){
//				Main.mgr.deleteOneTask(id, table);
//				List<task> list = new ArrayList<task>();
//				list.add(task1);
//				Main.mgr.add(list, "tasktable");
//				table = "tasktable";
//			}
//			else {
				Main.mgr.updateById(task1, id, table);
		//	}
		}
		return 1;
	}

	public static String[] getAllTags(){
		tagToTask = new HashMap<String, ArrayList<task>>();
		List<task> allTasks = new ArrayList<task>();
		ArrayList<String> allTags = new ArrayList<String>();
		allTasks.addAll(Main.mgr.query("tasktable"));
		//allTasks.addAll(Main.mgr.query("completedTasktable"));
		if (allTasks == null) return null;
		for (task t : allTasks) {
			if (t.tags != null) {
				List<String> temp = Arrays.asList(t.tags);
				for (String s : temp) {
					if (!s.equals(" ") && !s.equals("")) {
						if (!allTags.contains(s)) {
							allTags.add(s);
							//push to the <tag, tasksid> hashmap
							ArrayList<task> tagTasks = new ArrayList<task>();
							tagTasks.add(t);
							tagToTask.put(s, tagTasks);
						} else {
							tagToTask.get(s).add(t);
						}
					}
				}
			}
		}
		System.out.println((String[]) allTags.toArray(new String[allTags.size()]));
		return (String[]) allTags.toArray(new String[allTags.size()]);
	}

}
