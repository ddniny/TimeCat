package org.rushme.timecat.tasks;


import android.os.Bundle;
import android.app.AlertDialog;
import android.app.Fragment;
import android.content.DialogInterface;
import android.content.Intent;
import android.view.ContextMenu;
import android.view.ContextMenu.ContextMenuInfo;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnCreateContextMenuListener;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.TextView;
import android.widget.Toast;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.rushme.timecat.R;
import org.rushme.timecat.DataBean.CustomListBean;
import org.rushme.timecat.data.allTaskDAO;
import org.rushme.timecat.tasks.SlideDelListview.SlideDeleteListener;



public class MainActivity extends Fragment{// implements View.OnClickListener{

	private TextView date;
	private TextView time;
	static SlideDelListview activeListView;
	static String[] mFrom;
	static int[] mTo;
	private Date d = new Date();
	static SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm");


	static List<Map<String,Object>> activeTasks;
	public static MainActivity ma;
	private String[] mLocations;
	private int pointX, pointY, endX,endY;
	private int position,newpos;
	public static Button curDel_btn;
	public static CheckBox checkBox;
	MyExit myExit;
	public static final int priority_max = 2000;
	public static boolean longClick = false;
	public static final String ARG_MODE_NUMBER = "mode_number";
	static SelfAdapter mSelfAdapter;
	private static Button delMulti, cancel, setComplete;
	private static View rootView;
	private allTaskDAO taskDAO = new allTaskDAO();
	private CustomListBean bean = null;


	public MainActivity() {
		// Empty constructor required for fragment subclasses
	} 

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		rootView = inflater.inflate(R.layout.fragment_activelist, container, false);
		int i = getArguments().getInt(ARG_MODE_NUMBER);
		bean = (CustomListBean) getArguments().getSerializable("customListBean");
		
		setHasOptionsMenu(true);

		
		String title = getArguments().getString("title");
		if (title != null) {
			getActivity().setTitle(title);
		} else {
			String planet = getResources().getStringArray(R.array.Mode_array)[i];
			getActivity().setTitle(planet);
		}
		longClick = false;
		myExit = (MyExit) getActivity().getApplication();
		myExit.setExit(false);
		delMulti = (Button)rootView.findViewById(R.id.delMulti);

		delMulti.setOnClickListener(new OnClickListener(){

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				deletMulti();
			}

		});

		cancel = (Button)rootView.findViewById(R.id.cancel);
		cancel.setOnClickListener(new OnClickListener(){

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				batchProcessing();
			}

		});

		setComplete = (Button)rootView.findViewById(R.id.setComplete);
		setComplete.setOnClickListener(new OnClickListener(){

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				setMulti();
			}

		});


		activeListView = (SlideDelListview)rootView.findViewById(android.R.id.list);
		mFrom = new String[]{"Description", "details","time"};
		mTo = new int[]{R.id.description, R.id.details,R.id.time};

		//own defined Adapter using to associate the items with the ListView
		activeTasks = new ArrayList<Map<String, Object>> ();
		activeTasks.clear();
		activeTasks.addAll(getData(taskDAO.getProperList(bean)));
		//activeTasks = getData();
		mSelfAdapter = new SelfAdapter(getActivity(), activeTasks, R.layout.item_active, mFrom, mTo);

		activeListView.setAdapter(mSelfAdapter);

		activeListView.setOnCreateContextMenuListener(new OnCreateContextMenuListener() { 
			@Override
			public void onCreateContextMenu(ContextMenu menu, View v, 
					ContextMenuInfo menuInfo) { 
				longClick = true;
				menu.add(0, 0, 0, "Mark as Completed/ Uncompleted"); 
				menu.add(0, 1, 0, "New Task Higher"); 
				menu.add(0, 2, 0, "Delete"); 
			}
		});

		activeListView.setFlipperDeleteListener(new SlideDeleteListener() {

			public void filpperOnclick(float xPosition, float yPosition) {
				if (curDel_btn != null) {  //delete button disappear when press other place
					curDel_btn.setVisibility(View.GONE);
				}
				if (longClick) {
					longClick = false;
					return;
				}
				if (activeListView.getChildCount() == 0)
					return;
				// get the position of the item according to the coordinates
				final int position = activeListView.pointToPosition((int) xPosition, (int) yPosition);
				if (position == -1){
					return;
				}
				final String selectedId = activeTasks.get(position).get("id").toString();
				final String selectedTable = "tasktable";
				//				if (!activeTasks.get(position).containsKey("table")){
				//					selectedTable = "tasktable";
				//				}else{
				//					selectedTable = "completedTasktable";
				//				}
				task selectedTask = Main.mgr.queryById(selectedId, selectedTable);
				Intent intent = new Intent();
				intent.setClass(MainActivity.this.getActivity(), taskEdit.class);
				Bundle bundle=new Bundle();  
				bundle.putString("id", selectedId); 
				bundle.putString("table", selectedTable);
				intent.putExtras(bundle); 
				startActivity(intent);
			}

			public void filpperMarkAs(float xPosition, float yPosition) {
				final int position = activeListView.pointToPosition((int) xPosition, (int) yPosition);
				if (position == -1){
					return;
				}
				final String selectedId = activeTasks.get(position).get("id").toString();
				final String selectedTable = "tasktable";
				//				if (!activeTasks.get(position).containsKey("table")){
				//					selectedTable = "tasktable";
				//				}else{
				//					selectedTable = "completedTasktable";
				//				}
				task selectedTask = Main.mgr.queryById(selectedId, selectedTable);
				if (!selectedTask.getState.toString().equals("COMPLETED")){
					markAsCompleted (selectedTask, selectedId, selectedTable);
				} else {
					//TODO
					markAsUncompleted (selectedTask, selectedId, selectedTable);
				}
				activeTasks.clear();
				activeTasks.addAll(getData(taskDAO.getProperList(bean)));
				mSelfAdapter.notifyDataSetChanged();
				Toast.makeText(getActivity(), "Mark as completed.", Toast.LENGTH_LONG).show();
			}

			public void filpperDelete(float xPosition, float yPosition) {
				if (activeListView.getChildCount() == 0)
					return;
				final int index = activeListView.pointToPosition((int) xPosition, (int) yPosition);
				// 以下两步是获得该条目在屏幕显示中的相对位置，直接根据index删除会空指針异常。因为listview中的child只有当前在屏幕中显示的才不会为空
				if (index == -1){
					return;
				}
				int firstVisiblePostion = activeListView.getFirstVisiblePosition();
				View view = activeListView.getChildAt(index - firstVisiblePostion);
				if (curDel_btn!=null) {
					curDel_btn.setVisibility(View.GONE);
					curDel_btn = null;
				}else{

					curDel_btn = (Button)view.findViewById(R.id.del);
					curDel_btn.setVisibility(View.VISIBLE);
					curDel_btn.setOnClickListener(new OnClickListener(){

						@Override
						public void onClick(View v) {
							new AlertDialog.Builder(MainActivity.this.getActivity())
							.setTitle("Delete a Task!")
							.setMessage("Are you sure you want to delete this task?")
							.setPositiveButton("YES", new DialogInterface.OnClickListener() {
								public void onClick(DialogInterface dialog, int which) { 
									final String selectedId = activeTasks.get(index).get("id").toString();
									final String selectedTable = "tasktable";
									//									if (!activeTasks.get(index).containsKey("table")){
									//										selectedTable = "tasktable";
									//									}else{
									//										selectedTable = "completedTasktable";
									//									}
									Main.mgr.deleteOneTask(selectedId, selectedTable);
									activeTasks.clear();
									activeTasks.addAll(getData(taskDAO.getProperList(bean)));
									mSelfAdapter.notifyDataSetChanged();
									curDel_btn.setVisibility(View.GONE);
								}
							})
							.setNegativeButton("NO", new DialogInterface.OnClickListener() {
								public void onClick(DialogInterface dialog, int which) { 

								}
							})
							.show();

						}

					});

				}


			}
		});

		ma = this;
		return rootView;

	}

	public boolean onCreateOptionsMenu(Menu menu) {
		MenuInflater inflater = getActivity().getMenuInflater();
		inflater.inflate(R.menu.main, menu);
		//currentMenu = menu;
		return super.getActivity().onCreateOptionsMenu(menu);
	}
	
	/* Called whenever we call invalidateOptionsMenu() */
	@Override
	public void onPrepareOptionsMenu(Menu menu) {
		// If the nav drawer is open, hide action items related to the content view
		//boolean drawerOpen = mDrawerLayout.isDrawerOpen(mDrawerList);
		//boolean drawerOpen = Main.getInstance().mDrawerLayout.isDrawerOpen(Main.getInstance().expListView);
		//if (drawerOpen){
			menu.findItem(R.id.action_refresh).setVisible(true);
			menu.findItem(R.id.action_settings).setVisible(true);
			menu.findItem(R.id.action_group).setVisible(true);
			menu.findItem(R.id.action_new).setVisible(true);
			menu.findItem(R.id.action_accept).setVisible(!true);
		//}
	}


	public boolean onContextItemSelected(android.view.MenuItem item) { 

		AdapterView.AdapterContextMenuInfo info = (AdapterView.AdapterContextMenuInfo) item.getMenuInfo(); 
		int position = info.position;  
		final String selectedId = activeTasks.get(position).get("id").toString();
		final String selectedTable = "tasktable";
		//		if (!activeTasks.get(position).containsKey("table")){
		//			selectedTable = "tasktable";
		//		}else{
		//			selectedTable = "completedTasktable";
		//		}
		task selectedTask = Main.mgr.queryById(selectedId, selectedTable);
		String oldState = selectedTask.getState.toString();
		longClick = false;
		switch (item.getItemId()) { 
		case 0: 
			// Mark as Completed
			if (!selectedTask.getState.toString().equals("COMPLETED")) {
				markAsCompleted (selectedTask, selectedId, selectedTable);
			} else {
				markAsUncompleted(selectedTask, selectedId, selectedTable);
			}
			activeTasks.clear();
			activeTasks.addAll(getData(taskDAO.getProperList(bean)));
			mSelfAdapter.notifyDataSetChanged();
			break; 

		case 1: 
			// New Task Higher
			//Toast.makeText(MainActivity.this,String.valueOf(info.position), Toast.LENGTH_LONG).show();
			String priorId;
			String priorTable;
			float score = getScore(selectedTask);
			float newScore;
			task priorTask = null;
			if (position == 0){
				newScore = score + 1;

			}else {
				priorId = activeTasks.get(position-1).get("id").toString();
				priorTable = "tasktable";
				//				if (!activeTasks.get(position-1).containsKey("table")){
				//					priorTable = "tasktable";
				//				}else{
				//					priorTable = "completedTasktable";
				//				}
				priorTask = Main.mgr.queryById(priorId, priorTable);
				float priorScore = getScore(priorTask);
				newScore = (score + priorScore)/2;
			}
			Intent intent = new Intent();
			intent.setClass(MainActivity.this.getActivity(), taskEdit.class);
			Bundle bundle=new Bundle();  
			bundle.putString("newScore", String.valueOf(newScore)); 
			intent.putExtras(bundle); 
			startActivity(intent);
			break; 

		case 2: 
			// Delete 
			new AlertDialog.Builder(MainActivity.this.getActivity())
			.setTitle("Delete a Task!")
			.setMessage("Are you sure you want to delete this task?")
			.setPositiveButton("YES", new DialogInterface.OnClickListener() {
				public void onClick(DialogInterface dialog, int which) { 
					Main.mgr.deleteOneTask(selectedId, selectedTable);
					activeTasks.clear();
					activeTasks.addAll(getData(taskDAO.getProperList(bean)));
					mSelfAdapter.notifyDataSetChanged();
				}
			})
			.setNegativeButton("NO", new DialogInterface.OnClickListener() {
				public void onClick(DialogInterface dialog, int which) { 

				}
			})
			.show();
			break; 

		default: 
			break; 		
		} 
		mSelfAdapter.notifyDataSetChanged();


		return super.onContextItemSelected(item);

	} 



	//	@SuppressWarnings("unchecked")
	//	public static List<Map<String, Object>> getData(){
	//		/*
	//		 * store the data extracted from database into a Map and use ArrayList to organize the Maps.
	//		 */
	//		List<Map<String,Object>> mList = new ArrayList<Map<String,Object>>();
	//		Map<String,Object> mMap = null;
	//		List<task> tasks = Main.mgr.queryActive();//Main.mgr.query("tasktable");  //only query the informations of active tasks
	//		tasks.addAll(Main.mgr.queryExpired());
	//		Collections.sort(tasks, new Comparator<task>(){
	//
	//
	//			public int compare(task task1, task task2) {
	//				Date now = new Date();
	//				float score1, score2;
	//				score1 = getScore(task1);
	//				score2 = getScore(task2);
	//				System.out.println("score1:"+score1+ task1.details+" score2:"+score2 +task2.details+"!!!!!!!!!!!");
	//
	//				if (score1 > score2) return -1;
	//				else return 1;
	//			}	
	//
	//		});
	//
	//		for (task everyTask : tasks){
	//			mMap = new HashMap<String, Object>();
	//			mMap.put("id", everyTask.id);
	//			mMap.put("details", everyTask.details);
	//			mMap.put("Description", everyTask.description);
	//			if (everyTask.getState.toString().equals("EXPIRED")) {
	//				mMap.put("time", "Expired at: " + everyTask.endTime);
	//			} else {
	//				mMap.put("time", getRemaining(everyTask));
	//			}
	//			mList.add(mMap);
	//		}
	//		return mList;
	//	}

	public static List<Map<String, Object>> getData(ArrayList<task> tasks){
		/*
		 * store the data extracted from database into a Map and use ArrayList to organize the Maps.
		 */

		Map<String,Object> mMap = null;
		List<Map<String,Object>> mList = new ArrayList<Map<String,Object>>();
		for (task everyTask : tasks){
			mMap = new HashMap<String, Object>();
			mMap.put("id", everyTask.id);
			mMap.put("Description", everyTask.description);
			mMap.put("details", everyTask.details);
			if (everyTask.getState.toString().equals("EXPIRED")) {
				mMap.put("time", "Expired at: " + everyTask.endTime);
			} else {
				mMap.put("time", getRemaining(everyTask));
			}
			mList.add(mMap);
		}
		return mList;
	}



	public static String getRemaining(task everyTask){
		Date now = new Date();
		try {
			now = sdf.parse(sdf.format(now));
		} catch (ParseException e) {
			e.printStackTrace();
		}
		java.util.Date dueDay = null;
		try {
			dueDay = sdf.parse(everyTask.endTime);
		} catch (ParseException e) {
			e.printStackTrace();
		}
		long l=dueDay.getTime() - now.getTime();
		long day=l/(24*60*60*1000);
		long hour=(l/(60*60*1000)-day*24);
		long min=((l/(60*1000))-day*24*60-hour*60);
		//long s=(l/1000-day*24*60*60-hour*60*60-min*60);
		if (l<=0){
			return "0 Day 0 Hour 0 Min";
		}else{
			return day + " Days " + hour + " Hours " + min + " Minutes";
		}
	}


	public static float getScore(task task){
		float score = task.priority;
		Date now = new Date();
		try {
			if (task.getState.toString().equals("ACTIVE")){
				long endTime;
				endTime = sdf.parse(task.endTime).getTime();
				long startTime = sdf.parse(task.startTime).getTime();
				float priority = task.priority;
				long nowTime = sdf.parse(sdf.format(now)).getTime();
				if (endTime != startTime){
					score = priority + (priority_max - priority) * (float)(nowTime - startTime)/(float)(endTime - startTime);
					//System.out.println(nowTime + " " + startTime + " " + endTime + "!!!!!!!!!!!!getscore");
				}else{
					score = priority;
				}
			}else{
				score = task.priority;
			}
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return score;
	}

	public void markAsCompleted (task selectedTask, String selectedId, String selectedTable) {
		if (selectedTask == null) return;
		selectedTask.setState("COMPLETED");
		Main.mgr.updateById(selectedTask, selectedId, selectedTable);
		//		if (selectedTable.toString().equals("tasktable")){	//mark the task to completed and move it to the completedTasktable from tasktable
		//			Main.mgr.deleteOneTask(selectedId, selectedTable);
		//			List<task> list = new ArrayList<task>();
		//			list.add(selectedTask);
		//			Main.mgr.add(list, "completedTasktable");
		//		}
	}

	public void markAsUncompleted (task selectedTask, String selectedId, String selectedTable){
		if (selectedTask == null) return;
		selectedTask.setState("ACTIVE");
		Main.mgr.updateById(selectedTask, selectedId, selectedTable);
		//		if (selectedTable.toString().equals("completedTasktable")){	//mark the task to completed and move it to the completedTasktable from tasktable
		//			Main.mgr.deleteOneTask(selectedId, selectedTable);
		//			List<task> list = new ArrayList<task>();
		//			list.add(selectedTask);
		//			Main.mgr.add(list, "tasktable");
		//		}
	}

	public void batchProcessing () {
		if (curDel_btn != null) curDel_btn.setVisibility(View.GONE);
		activeListView.setScrollBarStyle(1);
		for(int i = 0; i < activeListView.getChildCount(); i++) {
			int firstVisiblePosition = activeListView.getFirstVisiblePosition();
			View view = activeListView.getChildAt(i-firstVisiblePosition);
			CheckBox cb = (CheckBox) view.findViewById(R.id.checkBox);
			if (cb.getVisibility() != View.VISIBLE) {
				cb.setVisibility(View.VISIBLE);
			} else {
				cb.setVisibility(View.GONE);
			}
			Main.isSelected.clear();
			for(int j = 0; j<activeListView.getChildCount(); j++){
				Main.isSelected.put(j, false);
			}
		}
		delMulti = (Button)rootView.findViewById(R.id.delMulti);
		if (delMulti.getVisibility() != View.VISIBLE) {
			delMulti.setVisibility(View.VISIBLE);
		} else {
			delMulti.setVisibility(View.GONE);
		}
		cancel = (Button)rootView.findViewById(R.id.cancel);
		if (cancel.getVisibility() != View.VISIBLE) {
			cancel.setVisibility(View.VISIBLE);
		} else {
			cancel.setVisibility(View.GONE);
		}		
		setComplete = (Button)rootView.findViewById(R.id.setComplete);
		if (setComplete.getVisibility() != View.VISIBLE) {
			setComplete.setVisibility(View.VISIBLE);
		} else {
			setComplete.setVisibility(View.GONE);
		}
	}

	public void deletMulti(){
		new AlertDialog.Builder(this.getActivity())
		.setTitle("Delete Task!")
		.setMessage("Are you sure you want to delete these tasks?")
		.setPositiveButton("YES", new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog, int which) { 
				for (int index=0; index < Main.isSelected.size(); index++) {
					if (Main.isSelected.get(index)) {
						final String selectedId = activeTasks.get(index).get("id").toString();
						final String selectedTable = "tasktable";
						//						if (!activeTasks.get(index).containsKey("table")){
						//							selectedTable = "tasktable";
						//						}else{
						//							selectedTable = "completedTasktable";
						//						}
						Main.mgr.deleteOneTask(selectedId, selectedTable);
					}	
				}
				activeTasks.clear();
				activeTasks.addAll(getData(taskDAO.getProperList(bean)));
				mSelfAdapter.notifyDataSetChanged();
				Main.isSelected.clear();
				for(int j = 0; j<activeListView.getChildCount(); j++){
					int firstVisiblePosition = activeListView.getFirstVisiblePosition();
					View view = activeListView.getChildAt(j-firstVisiblePosition);
					CheckBox cb = (CheckBox) view.findViewById(R.id.checkBox);
					cb.setChecked(false);
					Main.isSelected.put(j, false);
				}
			}
		})
		.setNegativeButton("NO", new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog, int which) { 

			}
		})
		.show();

	}

	public void setMulti(){
		for (int index=0; index < Main.isSelected.size(); index++) {
			if (Main.isSelected.get(index)) {
				final String selectedId = activeTasks.get(index).get("id").toString();
				final String selectedTable = "tasktable";
				//				if (!activeTasks.get(index).containsKey("table")){
				//					selectedTable = "tasktable";
				//				}else{
				//					selectedTable = "completedTasktable";
				//				}
				task selectedTask = Main.mgr.queryById(selectedId, selectedTable);
				if (!selectedTask.getState.toString().equals("COMPLETED")) {
					markAsCompleted (selectedTask, selectedId, selectedTable);	
				} else {
					markAsUncompleted(selectedTask, selectedId, selectedTable);
				}
			}	
		}
		activeTasks.clear();
		activeTasks.addAll(getData(taskDAO.getProperList(bean)));
		mSelfAdapter.notifyDataSetChanged();

		Main.isSelected.clear();
		for(int j = 0; j<activeListView.getChildCount(); j++){
			int firstVisiblePosition = activeListView.getFirstVisiblePosition();
			View view = activeListView.getChildAt(j-firstVisiblePosition);
			CheckBox cb = (CheckBox) view.findViewById(R.id.checkBox);
			cb.setChecked(false);
			Main.isSelected.put(j, false);
		}

	}



}
